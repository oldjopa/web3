<?xml version="1.0" encoding="UTF-8"?>
<project name="Lab3" default="build">

    <property file="build.properties"/>

    <property name="ant-contrib.jar" location="lib/main/ant-contrib-1.0b3.jar"/>
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${ant-contrib.jar}"/>
        </classpath>
    </taskdef>

    <path id="lib.main.path">
        <fileset dir="${lib.main.dir}" includes="**/*.jar"/>
    </path>

    <path id="lib.test.path">
        <path refid="lib.main.path"/>
        <fileset dir="${lib.test.dir}" includes="**/*.jar"/>
    </path>


    <macrodef name="svn-commit" description="Добавление файлов и совершение коммита в репозиторий svn">
        <sequential>
            <exec executable="svn">
                <arg value="add"/>
                <arg value="."/>
                <arg value="--force"/>
            </exec>

            <input message="Введите сообщение коммита: "
                   addproperty="commit.message"/>

            <exec executable="svn">
                <arg value="commit"/>
                <arg value="-m"/>
                <arg value="${commit.message}"/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="svn-status" description="Вывод состояния файлов рабочей копии">
        <attribute name="outputproperty"/>
        <sequential>
            <exec executable="svn" outputproperty="@{outputproperty}">
                <arg value="status"/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="git-copy-commit" description="Получение файлов проекта по указанному коммиту и генерация zip-архива">
        <attribute name="commit"/>
        <attribute name="dest"/>
        <sequential>
            <exec executable="git">
                <arg value="archive"/>
                <arg value="--format=zip"/>
                <arg value="--output=@{dest}"/>
                <arg value="@{commit}"/>
            </exec>
        </sequential>
    </macrodef>

    <target name="compile" description="Compile">
        <echo>Compiling code...</echo>
        <property name="srcdir" value="${src.main.dir}"/>
        <mkdir dir="${build.classes.dir}"/>
        <javac srcdir="${src.dir}"
               destdir="${build.classes.dir}"
               includeantruntime="false">
            <classpath refid="lib.main.path"/>
        </javac>

        <echo>Compiling tests...</echo>
        <mkdir dir="${test.dir}"/>
        <javac srcdir="${src.test.dir}"
               destdir="${test.dir}"
               includeantruntime="false">
            <classpath>
                <path refid="lib.test.path"/>
                <pathelement location="${build.classes.dir}"/>
            </classpath>
        </javac>
    </target>

    <target name="build" depends="compile" description="Build war">
        <echo>Copying project libs into WEB-INF/lib...</echo>
        <copy todir="${build.web-inf.lib}">
            <path refid="lib.main.path"/>
        </copy>

        <echo>Copying all files into WEB-INF...</echo>
        <copy todir="${build.web-inf}">
            <fileset dir="${src.main.web}/WEB-INF"/>
        </copy>

        <echo>Copying resources...</echo>
        <copy todir="${build.classes.dir}">
            <fileset dir="${src.main.resources}"/>
        </copy>

        <echo>Copying all static files into war...</echo>
        <copy todir="${build.dir}">
            <fileset dir="${src.main.web}">
                <exclude name="WEB-INF/**"/>
            </fileset>
        </copy>

        <echo>Creating war...</echo>
        <property name="war" value="${build.dir}/${ant.project.name}.war"/>
        <delete file="${war}"/>
        <war destfile="${war}">
            <fileset dir="${build.dir}"/>
        </war>
    </target>

    <target name="clean" description="Удаление скомпилированных файлов">
        <echo>RM classes dir...</echo>
        <delete dir="${build.dir}"/>
        <echo>RM tests dir...</echo>
        <delete dir="${test.dir}"/>
<!--        <echo>Удаление директории с документами...</echo>-->
<!--        <delete dir="${doc.dir}"/>-->
        <echo>RM native2ascii dir...</echo>
        <delete dir="${native2ascii.resources}"/>
    </target>

    <target name="test" depends="build" description="Compiling and testing">
        <echo>Creating reports directory...</echo>
        <mkdir dir="${test.report.dir}"/>
        <echo>Executing tests...</echo>
        <junitlauncher printsummary="true" haltonfailure="true">
            <classpath>
                <path refid="lib.test.path"/>
                <pathelement location="${build.dir}"/>
                <pathelement location="${build.classes.dir}"/>
                <pathelement location="${test.dir}"/>
            </classpath>
            <testclasses outputdir="${test.report.dir}">
                <fileset dir="${test.dir}">
                    <include name="**/*Test*.class"/>
                </fileset>
                <listener type="legacy-xml"
                          sendSysOut="true"
                          sendSysErr="true"/>
                <fork/>
            </testclasses>
        </junitlauncher>
    </target>

    <target name="music" description="Music after build">
        <sound>
            <success source="${music.success.file}"/>
            <fail source="${music.fail.file}"/>
        </sound>
        <antcall target="build"/>
        <echo>Воспроизведение звукового файла...</echo>
    </target>

    <target name="scp" depends="build" description="build and move war to server via scp">
<!--        <input message="Password: " addproperty="scp.password">-->
<!--            <handler type="secure"/>-->
<!--        </input>-->
<!--        <trycatch>-->
<!--            <try>-->
                <echo>Connecting...</echo>
                <scp file="${build.dir}/${ant.project.name}.war"
                     todir="${scp.user}@${scp.host}:${scp.dir}"
                     password="${scp.password}"
                     port="${scp.port}"
                     trust="true"/>
<!--            </try>-->
<!--            <catch>-->
<!--                <fail message="Failed to connect to server"/>-->
<!--            </catch>-->
<!--        </trycatch>-->
    </target>

    <target name="native2ascii" description="Преобразование native2ascii для копий файлов локализации">
        <native2ascii src="${src.main.resources}"
                      dest="${native2ascii.resources}"
                      includes="**/*.properties"/>
    </target>

    <target name="env" depends="scp" description="build and move war to server via scp, web server start">
        <echo>Starting web server...</echo>
        <sshexec host="${scp.host}"
                 username="${scp.user}"
                 password="${scp.password}"
                 port="${scp.port}"
                 trust="true"
                 command="sh ${env.script}"/>
    </target>

    <target name="xml" description="Проверка валидности xml">
        <echo>Проверка валидности xml</echo>
        <xmlvalidate lenient="yes">
            <fileset dir="." includes="*/*.xml"/>
        </xmlvalidate>
    </target>

    <target name="team">
        <!--        <for param="i" begin="1" end="4">
                    <sequential>-->
        <property name="war" value="${build.dir}/${ant.project.name}.war"/>
        <delete dir="${temp.dir}"/>

        <mkdir dir="${temp.dir}"/>

        <echo>Ревизия #1:</echo>
        <exec executable="${svn.executable}">
            <arg line="checkout -r HEAD:HEAD~3 ${svn.repository.url} ${temp.dir}"/>
        </exec>
        <antcall target="build"/>
        <!--                 <mkdir dir="${temp.dir}/r1"/> -->
        <copy file="${war}" tofile="${temp.dir}/r1/${war}"/>

        <echo>Ревизия #2:</echo>
        <exec executable="${svn.executable}">
            <arg line="checkout -r HEAD:HEAD~2 ${svn.repository.url} ${temp.dir}"/>
        </exec>
        <antcall target="build"/>
        <copy file="${war}" tofile="${temp.dir}/r2/${war}"/>

        <echo>Ревизия #3:</echo>
        <exec executable="${svn.executable}">
            <arg line="checkout -r HEAD:HEAD~1 ${svn.repository.url} ${temp.dir}"/>
        </exec>
        <antcall target="build"/>
        <copy file="${war}" tofile="${temp.dir}/r3/${war}"/>

        <echo>Ревизия #4:</echo>
        <exec executable="${svn.executable}">
            <arg line="checkout -r HEAD:HEAD ${svn.repository.url} ${temp.dir}"/>
        </exec>
        <antcall target="build"/>
        <copy file="${war}" tofile="${temp.dir}/r4/${war}"/>

        <zip destfile="${output.zip}">
            <fileset dir="${temp.dir}"/>
        </zip>
        <!--            </sequential>
                </for>-->
    </target>


    <target name="history" description="Building the newest buildable revision, then show difference with next revision">
        <antcall target="compile-with-history"/>
    </target>

    <property name="revision.file" value="last_successful_revision.txt"/>
    <property name="diff.file" value="diff_result.txt"/>

    <target name="compile-with-history">
        <trycatch>
            <try>
                <antcall target="compile"/>
            </try>
            <catch>
                <echo message="Compilation failed, trying to revert to previous version from SVN..."/>
                <antcall target="revert-to-previous-revision"/>
                <antcall target="compile"/>
            </catch>
        </trycatch>
    </target>

    <target name="revert-to-previous-revision">
        <loadfile property="last_successful_revision" srcFile="${revision.file}" />
        <propertyregex property="previous_revision" input="${last_successful_revision}" regexp="(\d+)" select="\1" />
        <math result="previous_revision" operand1="${previous_revision}" operation="sub" operand2="1"/>
        <exec executable="${svn.executable}">
            <arg line="update -r ${previous_revision}"/>
        </exec>
    </target>

    <target name="generate-diff">
        <exec executable="${svn.executable}" output="${diff.file}">
            <arg line="diff -r ${last_successful_revision}:${previous_revision}"/>
        </exec>
    </target>

    <target name="report" depends="test" description="If all test pass then create junit, git add and commit">
        <mkdir dir="${doc.report.dir}"/>
        <copy todir="${doc.report.dir}">
            <fileset dir="${test.dir}" includes="*.xml"/>
        </copy>
        <sequential>
            <exec executable="git">
                <arg value="add"/>
                <arg value="${doc.report.dir}/*"/>
            </exec>
            <exec executable="git">
                <arg value="commit"/>
                <arg value="-m"/>
                <arg value="passed tests"/>
            </exec>
        </sequential>
    </target>


</project>